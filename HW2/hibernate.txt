
Object/Relational Mapping(ORM) framework
Converting data between relational databases and object-oriented programming languages

Pros:
Write applications whose data outlives(last long) in the process
Concerned with data persistence - apply to relational database

JPA Provider
Implementation of the Java Persistence API (JPA)
Used in environments that support JPA: Java SE, Java EE servers

Idiomatic persistence
Object-oriented idioms including inheritance, polymorphism, association, composition,
and the Java collections' framework
Develop persistent classes
Requires no interfaces or base classes for persistent classes
Enables any class or data structure to be persistent

High performance
Supports lazy initialization numerous fetching strategies and optimistic locking
with automatic versioning and time stamping
Generates SQL at system initialization time instead of at runtime.

Scalability
Reliable
Extensibility

4a
Eager Loading
Design pattern where data initialization occurs on the spot
Object initialized immediately, stored in memory

Lazy Loading
Defer initialization of an object
Get initialized when we explicitly call it, using getter or other methods

4b
Why is ORM?
Mismatch between the object model and the relational database.
RDBMS: tabular format
OOP: interconnected graph of objects

1. Granularity: object model has more classes than corresponding tables in the database
2. Inheritance: RDBMS doesn't have
3. Identity:
RDBMS: one notion - primary key
Java: both object identity(a==b) and object equality(a.equals(b))
4. Associations:
RDBMS: foreign key
Java: using object references
5. Navigation: Different in access

=> Use ORM to solve mismatches